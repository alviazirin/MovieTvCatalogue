			Testing Skenario

////---------------Unit Test:--------------------///////////

--------------  MovieTvRepositoryTest:  ------------------------
 
* Memeriksa Dependency Injection pada repository:

-> Memastikan depency yang diinjeksi dari RemoteDataSource, LocalDataSource dan Appexecutors tidak null

-> Memastikan kelas repository mendapatkan depency tersebut (tidak null)
------------

* Memastikan fungsi loadMovie 

-> meload movie dari localDataSource dan memastikan tidak null

-> memastikan jumlah movie dari dummy sesuai dengan jumlah seharusnya

-> memastikan observer livedata memperhatikan perubahan data
---------

* Memastikan fungsi loadTvShow 

-> meload tvShow dari localDataSource dan memastikan tidak null

-> memastikan jumlah tvShow dari dummy sesuai dengan jumlah seharusnya

-> memastikan observer livedata memperhatikan perubahan data
-------


* Memastikan fungsi loadMovieDetail 

-> meload movieDetail dari API-dummy dan memastikan tidak null

-> memastikan data detail telah sesuai dengan yang diharapkan (title,date,genre,production,overview)

-> memastikan observer livedata memperhatikan perubahan data
--------


* Memastikan fungsi loadTvShowDetail

-> meload tvShowDetail dari API-dummy dan memastikan tidak null

-> memastikan data detail telah sesuai dengan yang diharapkan (title,date,genre,production,overview)

-> memastikan observer livedata memperhatikan perubahan data
-----------



* Memeriksa fungsi getMovieFavorite

-> meload data dari dummy dan memastikan tidak null

-> memastikan jumlahnya sesuai dengan seharusnya (semua data terload)

-> memastikan observer livedata memperhatikan perubahan data
-----------



* Memeriksa fungsi getTvShowFavorite

-> meload data dari dummy dan memastikan tidak null

-> memastikan jumlahnya sesuai dengan seharusnya (semua data terload)

-> memastikan observer livedata memperhatikan perubahan data
-----------



* Memeriksa fungsi favorite()

-> mock kelas MovieTvRepository, dan melakukan fungsi favorited()

-> memastikan fungsi favorited() terinvokasi(terpanggil) satu kali
--------------



*Memeriksa fungsi unfavorite ()

-> mock kelas MovieTvRepository, dan melakukan fungsi favorited()

-> memastikan fungsi unfavorited() terinvokasi(terpanggil) satu kali
--------------



-------------------------  DetailViewModelTest: -------------------

* Memeriksa Dependency Injection

-> Memastikan dependency injection dari Repository tidak null

-> Memastikan kelas ViewModel menerima dependency injection (tidak null)
-------------



* Memeriksa fungsi getDetailMovie

-> meload dataDetail dari dummy dan memastikan tidak null

-> memastikan data yang diload telah sesuai dengan yang diharapkan (title,date,genre,production,overview)

-> memastikan observer livedata memperhatikan perubahan data
-----------



* Memeriksa fungsi getDetailTvshow

-> meload dataDetail dari dummy dan memastikan tidak null

-> memastikan data yang diload telah sesuai dengan yang diharapkan (title,date,genre,production,overview)

-> memastikan observer livedata memperhatikan perubahan data
------------



* Memeriksa fungsi favorite()

-> mock kelas DetailViewModel, dan melakukan fungsi favorited()

-> memastikan fungsi favorited() terinvokasi(terpanggil) satu kali
--------------



*Memeriksa fungsi unfavorite ()

-> mock kelas DetailViewModel, dan melakukan fungsi favorited()

-> memastikan fungsi unfavorited() terinvokasi(terpanggil) satu kali
--------------





------------------------ MovieViewModelTest: ----------------------

* Memeriksa Dependency Injection

-> Memastikan dependency injection dari Repository tidak null

-> Memastikan kelas ViewModel menerima dependency injection (tidak null)
-------------



* Memeriksa fungsi loadMovie

-> meload movie data dari dummy dan memastikan tidak null

-> memastikan jumlah data yang diload dengan implementasi paging memiliki jumlah sesuai yakni 5

-> memastikan observer livedata memperhatikan perubahan data
-------------



* TestCase NullData

-> mock load data dari dummy memberikan hasil null

-> memastikan NullPointerException dilemparkan sebagai error
----------



----------------------- TvShowViewModelTest: -----------------------

* Memeriksa Dependency Injection

-> Memastikan dependency injection dari Repository tidak null

-> Memastikan kelas ViewModel menerima dependency injection (tidak null)
-----------



* Memeriksa fungsi loadTvShow

-> meload tvShow data dari dummy dan memastikan tidak null

-> memastikan jumlah data yang diload dengan implementasi paging memiliki jumlah yang sesuai yakni 5

-> memastikan observer livedata memperhatikan perubahan data
---------

------------------------- MovieFavoriteViewModelTest: ---------------------
* Memeriksa Dependency Injection

-> Memastikan dependency injection dari Repository tidak null

-> Memastikan kelas ViewModel menerima dependency injection (tidak null)
-----------


* Memeriksa fungsi getMovie

-> meload movies data dari dummy dan memastikan tidak null

-> memastikan jumlah data telah sesuai dengan seharusnya

-> memastikan observer livedata memperhatikan perubahan data
---------

----------------------- TvFavoriteViewModelTest: -----------------------

* Memeriksa Dependency Injection

-> Memastikan dependency injection dari Repository tidak null

-> Memastikan kelas ViewModel menerima dependency injection (tidak null)
-----------



* Memeriksa fungsi getTvFavorite

-> meload tvShow data dari dummy dan memastikan tidak null

-> memastikan jumlah data telah sesuai dengan seharusnya

-> memastikan observer livedata memperhatikan perubahan data
---------



////////-------------------- Instrumentation Test ----------------//////

----------------------- Home Activity Test --------------------

* MainActivity-FragmentMovie

-> memastikan fragmentMovie menampilkan recyclerview dan memuat data

-> melakukan scroll recylerview hingga data terakhir



* MainActivity-FragmentTvshow

-> memastikan fragmentTvShow menampilkan recyclerview dan memuat data

-> melakukan scroll recylerview hingga data terakhir



* MainActivity-FragmentMovie-Detail

-> melakukan klik pada recyclerview data ke 1 dan memastikan textview title di DetailActivity muncul

-> memastikan komponen textview untuk data telah muncul untuk masing-masing data (title, year, genre, director, description)




* MainActivity-FragmentTvShow-Detail

-> melakukan klik pada recyclerview data ke 1 dan memastikan textview title di DetailActivity muncul

-> memastikan komponen textview untuk data telah muncul untuk masing-masing data (title, year, genre, director, description)




* MainActivity-Fragment-Detail-ShareButton

-> memastikan button fab share tampil

-> memastikan button fab dapat di klik






* Test UI interaksi Favorite
-> melakukan klik pada recylerview movie dan memastikan tombol favorite (fab_fav) muncul

-> melakukan klik pada tombol favorite (fab_fav)

-> menekan tombol kembali

-> melakukan klik pada text "Tv Shows"

-> memastikan recylerview tvShow (rv_tvShow) muncul

-> melakukan klik pada recyclerview tvShow dan memastikan tombol favorite muncul

-> melakukan klik pada tombol favorite

-> menekan tombol kembali

-> memastikan menu favorite muncul (R.id.mn_favorite)

-> melakukan klik pada menu favorite

-> memastikan recyclerview pada tab movies muncul, menunjukkan bahwa fungsi favorite berhasil

-> melakukan klik pada text "Tv Shows"

-> memastikan recyclerview pada tab tvShows muncul, menunjukkan bahwa fungsi favorite berhasil



* Test UI interaksi unfavorite

-> melakukan serangkaian interaksi ui seperti pada test UI interaksi favorite

-> kembali pada activity favorite dan memastikan recylerview movie (rv_movies) muncul

-> melakukan klik pada recylerview item ke 1

-> memastikan button favorite (fab_fav) muncul

-> melakukan klik pada button favorite

-> menekan tombol kembali

-> menekan pada layar dengan teks "TvShow Favorite"

-> memastikan recyclerview tvshow (rv_tvshow) muncul

-> melakukan klik pada recylerview item ke 1

-> memastikan button favorite (fab_fav) muncul

-> melakukan klik pada button favorite